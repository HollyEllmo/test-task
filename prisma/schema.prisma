// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

model User {
  id            String    @id @default(cuid())
  phoneNumber   String?   @unique
  status        UserStatus @default(ACTIVE)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(ADMIN)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(true)
  twoFactorConfirmation TwoFactorConfirmation?
  news                News[]
}

model News {
  id          String   @id @default(cuid())
  title       String
  description String
  fullText    String
  status      NewsStatus
  createdAt   DateTime @default(now())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  fileKey     String?  @unique 
  file        File?    @relation(fields: [fileKey], references: [key]) 
}

enum NewsStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id           String    @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING) 
  url          String
  key          String    @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  news         News?   
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
